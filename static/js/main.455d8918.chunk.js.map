{"version":3,"sources":["GuestName.js","Guest.js","PendingGuest.js","GuestList.js","Counter.js","App.js","registerServiceWorker.js","index.js"],"names":["GuestName","props","isEditing","react_default","a","createElement","type","value","children","onChange","handleNameEdits","Guest","src_GuestName","event","setName","target","name","checked","isConfirmed","handleConfirmation","onClick","handleToggleEditing","handleRemove","PendingGuest","className","GuestList","src_PendingGuest","pendingGuest","guests","filter","guest","isFiltered","map","index","src_Guest","key","toggleConfirmationAt","toggleEditingAt","text","setNameAt","removeGuestAt","Counter","numberAttending","numberUnconfirmed","totalInvited","App","state","toggleGuestPropertyAt","property","indexToChange","_this","setState","Object","objectSpread","defineProperty","concat","toConsumableArray","slice","toggleFilter","handleNameInput","newGuestSubmitHandler","preventDefault","getTotalInvited","length","getAttendingGuests","reduce","total","this","onSubmit","placeholder","src_Counter","src_GuestList","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qRA2BeA,SAvBG,SAAAC,GACd,OAAGA,EAAMC,UAEDC,EAAAC,EAAAC,cAAA,SACIC,KAAK,OACLC,MAAON,EAAMO,SACbC,SAAUR,EAAMS,kBAKxBP,EAAAC,EAAAC,cAAA,YACKJ,EAAMO,YCgBJG,EA5BD,SAAAV,GAAK,OACfE,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACO,EAAD,CACIV,UAAWD,EAAMC,UACjBQ,gBAAiB,SAAAG,GAAK,OAAIZ,EAAMa,QAAQD,EAAME,OAAOR,SACpDN,EAAMe,MAEXb,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,SACIC,KAAK,WACLW,QAAShB,EAAMiB,YACfT,SAAUR,EAAMkB,qBAJxB,cAOAhB,EAAAC,EAAAC,cAAA,UAAQe,QAASnB,EAAMoB,qBAAsBpB,EAAMC,UAAY,OAAS,QACxEC,EAAAC,EAAAC,cAAA,UAAQe,QAASnB,EAAMqB,cAAvB,YCCOC,EAhBM,SAAAtB,GACjB,OAAIA,EAAMe,KAEFb,EAAAC,EAAAC,cAAA,MAAImB,UAAU,WACVrB,EAAAC,EAAAC,cAAA,YACKJ,EAAMe,OAKhB,MCoBIS,EA7BG,SAAAxB,GAAK,OACnBE,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACqB,EAAD,CAAcV,KAAMf,EAAM0B,eACzB1B,EAAM2B,OACFC,OAAO,SAAAC,GAAK,OAAK7B,EAAM8B,YAAcD,EAAMZ,cAC3Cc,IAAI,SAACF,EAAOG,GAAR,OACL9B,EAAAC,EAAAC,cAAC6B,EAAD,CACIlB,KAAMc,EAAMd,KACZmB,IAAKF,EACLf,YAAaY,EAAMZ,YACnBhB,UAAa4B,EAAM5B,UACnBiB,mBAAoB,kBAAMlB,EAAMmC,qBAAqBH,IACrDZ,oBAAqB,kBAAMpB,EAAMoC,gBAAgBJ,IACjDnB,QAAS,SAAAwB,GAAI,OAAIrC,EAAMsC,UAAUD,EAAKL,IACtCX,aAAc,kBAAMrB,EAAMuC,cAAcP,UCSzCQ,EAzBC,SAAAxC,GAAK,OACjBE,EAAAC,EAAAC,cAAA,SAAOmB,UAAU,WACbrB,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,UAAKJ,EAAMyC,kBAEfvC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,UAAKJ,EAAM0C,oBAEfxC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,UAAKJ,EAAM2C,kBCmJRC,6MAvJXC,MAAQ,CACJf,YAAW,EACXJ,aAAa,GACbC,OAAQ,CACJ,CACIZ,KAAM,WACNE,aAAa,EACbhB,WAAU,GAEd,CACIc,KAAM,MACNE,aAAa,EACbhB,WAAU,GAEd,CACIc,KAAM,QACNE,aAAa,EACbhB,WAAU,OAKtB6C,sBAAwB,SAACC,EAAUC,GAAX,OACpBC,EAAKC,SAAS,CACVvB,OAAQsB,EAAKJ,MAAMlB,OAAOI,IAAI,SAACF,EAAOG,GAClC,OAAGA,IAAUgB,EACFG,OAAAC,EAAA,EAAAD,CAAA,GACAtB,EADPsB,OAAAE,EAAA,EAAAF,CAAA,GAEKJ,GAAYlB,EAAMkB,KAGpBlB,SAInBM,qBAAuB,SAAAH,GAAK,OACxBiB,EAAKH,sBAAsB,cAAcd,MAE7CO,cAAgB,SAAAP,GAAK,OACjBiB,EAAKC,SAAS,CACXvB,OAAM,GAAA2B,OAAAH,OAAAI,EAAA,EAAAJ,CACCF,EAAKJ,MAAMlB,OAAO6B,MAAM,EAAExB,IAD3BmB,OAAAI,EAAA,EAAAJ,CAECF,EAAKJ,MAAMlB,OAAO6B,MAAMxB,EAAQ,UAI9CI,gBAAkB,SAAAJ,GAAK,OACnBiB,EAAKH,sBAAsB,YAAYd,MAE3CM,UAAY,SAACvB,EAAMiC,GAAP,OACRC,EAAKC,SAAS,CACVvB,OAAQsB,EAAKJ,MAAMlB,OAAOI,IAAI,SAACF,EAAOG,GAClC,OAAGA,IAAUgB,EACFG,OAAAC,EAAA,EAAAD,CAAA,GACAtB,EADP,CAEId,SAGDc,SAmBnB4B,aAAe,kBACXR,EAAKC,SAAS,CAACpB,YAAYmB,EAAKJ,MAAMf,gBAE1C4B,gBAAkB,SAAA9C,GAAK,OACnBqC,EAAKC,SAAS,CAACxB,aAAcd,EAAME,OAAOR,WAE9CqD,sBAAwB,SAAA/C,GACpBA,EAAMgD,iBACNX,EAAKC,SAAS,CACVvB,OAAM,CACF,CACIZ,KAAMkC,EAAKJ,MAAMnB,aACjBT,aAAY,EACZhB,WAAU,IAJZqD,OAAAH,OAAAI,EAAA,EAAAJ,CAMCF,EAAKJ,MAAMlB,SAElBD,aAAa,QAIrBmC,gBAAkB,kBAAMZ,EAAKJ,MAAMlB,OAAOmC,UAE1CC,mBAAqB,kBACjBd,EAAKJ,MAAMlB,OAAOqC,OAAO,SAACC,EAAOpC,GAAR,OAAkBA,EAAMZ,YAAcgD,EAAQ,EAAIA,GAAO,4EAGlF,IAAMtB,EAAeuB,KAAKL,kBACpBpB,EAAkByB,KAAKH,qBACvBrB,EAAoBC,EAAeF,EACzC,OACIvC,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACXrB,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,QAAM+D,SAAUD,KAAKP,uBACjBzD,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OACLG,SAAU0D,KAAKR,gBACfpD,MAAO4D,KAAKrB,MAAMnB,aAClB0C,YAAY,mBACnBlE,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASU,KAAK,SAAST,MAAM,UAA1C,YAGRJ,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,QACXrB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,SACIC,KAAK,WACLG,SAAU0D,KAAKT,aACfzC,QAASkD,KAAKrB,MAAMf,aAJ5B,sCAQJ5B,EAAAC,EAAAC,cAACiE,EAAD,CACI1B,aAAcA,EACdF,gBAAiBA,EACjBC,kBAAmBA,IAEvBxC,EAAAC,EAAAC,cAACkE,EAAD,CACI3C,OAAQuC,KAAKrB,MAAMlB,OACnBQ,qBAAsB+B,KAAK/B,qBAC3BC,gBAAiB8B,KAAK9B,gBACtBE,UAAa4B,KAAK5B,UAClBR,WAAcoC,KAAKrB,MAAMf,WACzBS,cAAiB2B,KAAK3B,cACtBb,aAAcwC,KAAKrB,MAAMnB,wBAtJ/B6C,aCKZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzC,QACfmC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAO7F,EAAAC,EAAAC,cAAC4F,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,kBAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAzB,OAAM8C,kBAAN,sBAEP5B,GAiDV,SAAiCO,GAE/BwB,MAAMxB,GACHI,KAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7BT,OAAOC,SAASoC,aAKpBjC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEArEAqB,CAAwBjC,GAIxBC,UAAUC,cAAc4B,MAAM1B,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MCzCxBkC","file":"static/js/main.455d8918.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst GuestName = props => {\r\n    if(props.isEditing){\r\n        return(\r\n            <input\r\n                type=\"text\"\r\n                value={props.children}\r\n                onChange={props.handleNameEdits}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <span>\r\n            {props.children}\r\n        </span>\r\n    )\r\n};\r\n\r\n\r\nGuestName.propTypes = {\r\n    isEditing: PropTypes.bool.isRequired,\r\n    handleNameEdits: PropTypes.func.isRequired\r\n};\r\n\r\nexport default GuestName;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GuestName from './GuestName'\r\n\r\nconst Guest = props =>\r\n    <li>\r\n        <GuestName\r\n            isEditing={props.isEditing}\r\n            handleNameEdits={event => props.setName(event.target.value)}>\r\n            {props.name}\r\n        </GuestName>\r\n        <label>\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={props.isConfirmed}\r\n                onChange={props.handleConfirmation}\r\n            /> Confirmed\r\n        </label>\r\n        <button onClick={props.handleToggleEditing}>{props.isEditing ? \"save\" : \"edit\"}</button>\r\n        <button onClick={props.handleRemove}>remove</button>\r\n    </li>;\r\n\r\nGuest.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    isConfirmed: PropTypes.bool.isRequired,\r\n    isEditing: PropTypes.bool.isRequired,\r\n    handleConfirmation: PropTypes.func.isRequired,\r\n    handleToggleEditing: PropTypes.func.isRequired,\r\n    setName: PropTypes.func.isRequired,\r\n    handleRemove:PropTypes.func.isRequired\r\n};\r\n\r\nexport default Guest;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst PendingGuest = props => {\r\n    if (props.name) {\r\n        return (\r\n            <li className=\"pending\">\r\n                <span>\r\n                    {props.name}\r\n                </span>\r\n            </li>\r\n        );\r\n    }\r\n    return null;\r\n};\r\nPendingGuest.propTypes = {\r\n    name: PropTypes.string.isRequired\r\n};\r\n\r\nexport default PendingGuest;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Guest from './Guest';\r\nimport PendingGuest from \"./PendingGuest\";\r\n\r\nconst GuestList = props =>\r\n    <ul>\r\n        <PendingGuest name={props.pendingGuest}/>\r\n        {props.guests\r\n            .filter(guest => !props.isFiltered || guest.isConfirmed)\r\n            .map((guest, index) =>\r\n            <Guest\r\n                name={guest.name}\r\n                key={index}\r\n                isConfirmed={guest.isConfirmed}\r\n                isEditing = {guest.isEditing}\r\n                handleConfirmation={() => props.toggleConfirmationAt(index)}\r\n                handleToggleEditing={() => props.toggleEditingAt(index)}\r\n                setName={text => props.setNameAt(text,index)}\r\n                handleRemove={() => props.removeGuestAt(index)}\r\n            />\r\n        )}\r\n    </ul>;\r\n\r\nGuestList.propTypes = {\r\n    guests: PropTypes.array.isRequired,\r\n    toggleConfirmationAt: PropTypes.func.isRequired,\r\n    toggleEditingAt: PropTypes.func.isRequired,\r\n    setNameAt: PropTypes.func.isRequired,\r\n    isFiltered:PropTypes.bool.isRequired,\r\n    removeGuestAt:PropTypes.func.isRequired,\r\n    pendingGuest: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GuestList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Counter = props =>\r\n    <table className=\"counter\">\r\n        <tbody>\r\n        <tr>\r\n            <td>Attending:</td>\r\n            <td>{props.numberAttending}</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Unconfirmed:</td>\r\n            <td>{props.numberUnconfirmed}</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Total:</td>\r\n            <td>{props.totalInvited}</td>\r\n        </tr>\r\n        </tbody>\r\n    </table>;\r\n\r\nCounter.propTypes = {\r\n    numberAttending:PropTypes.number,\r\n    numberUnconfirmed:PropTypes.number,\r\n    totalInvited:PropTypes.number\r\n};\r\n\r\n\r\nexport default Counter;","import React, {Component} from 'react';\nimport './App.css';\nimport GuestList from './GuestList';\nimport Counter from './Counter';\n\nclass App extends Component {\n\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {count: props.initialCount};\n    // }\n\n    state = {\n        isFiltered:false,\n        pendingGuest:\"\",\n        guests: [\n            {\n                name: 'Treasure',\n                isConfirmed: false,\n                isEditing:false\n            },\n            {\n                name: 'Nik',\n                isConfirmed: true,\n                isEditing:false\n            },\n            {\n                name: 'Matt ',\n                isConfirmed: false,\n                isEditing:true\n            }\n        ]\n    }\n\n    toggleGuestPropertyAt = (property, indexToChange) =>\n        this.setState({\n            guests: this.state.guests.map((guest, index)=>{\n                if(index === indexToChange){\n                    return {\n                        ...guest,\n                        [property]: !guest[property]\n                    };\n                }\n                return guest;\n            })\n        });\n\n    toggleConfirmationAt = index =>\n        this.toggleGuestPropertyAt(\"isConfirmed\",index);\n\n    removeGuestAt = index =>\n        this.setState({\n           guests:[\n               ...this.state.guests.slice(0,index),\n               ...this.state.guests.slice(index + 1)\n           ]\n        });\n\n    toggleEditingAt = index =>\n        this.toggleGuestPropertyAt(\"isEditing\",index);\n\n    setNameAt = (name, indexToChange) =>\n        this.setState({\n            guests: this.state.guests.map((guest, index)=>{\n                if(index === indexToChange){\n                    return {\n                        ...guest,\n                        name\n                    };\n                }\n                return guest;\n            })\n        });\n\n    // Toggle Checkbox State Example\n\n    // toggleConfirmationAt = indexToChange =>\n    //     this.setState({\n    //        guests: this.state.guests.map((guest, index)=>{\n    //            if(index === indexToChange){\n    //                return {\n    //                    ...guest,\n    //                    isConfirmed: !guest.isConfirmed\n    //                };\n    //            }\n    //            return guest;\n    //        })\n    //     });\n\n    toggleFilter = () =>\n        this.setState({isFiltered:!this.state.isFiltered});\n\n    handleNameInput = event =>\n        this.setState({pendingGuest: event.target.value});\n\n    newGuestSubmitHandler = event => {\n        event.preventDefault();\n        this.setState({\n            guests:[\n                {\n                    name: this.state.pendingGuest,\n                    isConfirmed:false,\n                    isEditing:false\n                },\n                ...this.state.guests\n            ],\n            pendingGuest:''\n        })\n    };\n\n    getTotalInvited = () => this.state.guests.length;\n\n    getAttendingGuests = () =>\n        this.state.guests.reduce((total, guest) => guest.isConfirmed ? total + 1 : total, 0);\n\n    render() {\n        const totalInvited = this.getTotalInvited();\n        const numberAttending = this.getAttendingGuests();\n        const numberUnconfirmed = totalInvited - numberAttending;\n        return (\n            <div className=\"App\">\n                <header>\n                    <h1>RSVP</h1>\n                    <p>A Treehouse App</p>\n                    <form onSubmit={this.newGuestSubmitHandler}>\n                        <input type=\"text\"\n                               onChange={this.handleNameInput}\n                               value={this.state.pendingGuest}\n                               placeholder=\"Invite Someone\"/>\n                        <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\n                    </form>\n                </header>\n                <div className=\"main\">\n                    <div>\n                        <h2>Invitees</h2>\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                onChange={this.toggleFilter}\n                                checked={this.state.isFiltered }\n                            /> Hide those who haven't responded\n                        </label>\n                    </div>\n                    <Counter\n                        totalInvited={totalInvited}\n                        numberAttending={numberAttending}\n                        numberUnconfirmed={numberUnconfirmed}\n                    />\n                    <GuestList\n                        guests={this.state.guests}\n                        toggleConfirmationAt={this.toggleConfirmationAt}\n                        toggleEditingAt={this.toggleEditingAt}\n                        setNameAt = {this.setNameAt}\n                        isFiltered = {this.state.isFiltered}\n                        removeGuestAt = {this.removeGuestAt}\n                        pendingGuest={this.state.pendingGuest}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}